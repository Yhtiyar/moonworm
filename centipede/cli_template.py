# Code generated by moonstream centipede : https://github.com/bugout-dev/centipede
# Centipede version : {centipede_version}

import argparse
import json
import os
from typing import Any, Dict, List, Optional, Tuple

from eth_typing.evm import Address, ChecksumAddress
import web3
from web3 import Web3
from web3.contract import Contract


def init_web3(ipc_path: str) -> Web3:
    return web3.HTTPProvider(ipc_path)


def init_contract(web3: Web3, abi: Dict[str, Any], address: Optional[str]) -> Contract:
    checksum_address: Optional[ChecksumAddress] = None
    if address is not None:
        checksum_address = web3.toChecksumAddress(address)
    return web3.eth.contract(address=checksum_address, abi=abi)


def make_function_call(contract: Contract, function_name: str, *args):
    contract.functions[function_name](*args).call()


def generate_argument_parser() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser(description="Your smart contract cli")
    subcommands = parser.add_subparsers(
        dest="subcommand",
    )
    call = subcommands.add_parser("call", description="Call smart contract function")
    call_subcommands = call.add_subparsers(
        dest="fn_name",
    )
    my_fn = call_subcommands.add_parser("my_fn", description="My fn call")
    my_fn.add_argument("name")
    my_fn.add_argument("surname")

    my_fn2 = call_subcommands.add_parser("my_fn2", description="My fn2 call")
    my_fn2.add_argument("name2")
    my_fn2.add_argument("surname2")

    return parser


def main() -> None:
    parser = generate_argument_parser()
    args = parser.parse_args()
    print(args)


if __name__ == "__main__":
    main()
