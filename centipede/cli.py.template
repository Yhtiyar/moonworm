# Code generated by moonstream centipede : https://github.com/bugout-dev/centipede
# Centipede version : {centipede_version}

import argparse
import json
from typing import Any, Callable, Dict, List, Optional, Tuple

from eth_typing.evm import Address, ChecksumAddress
import web3
from web3 import Web3
from web3.contract import Contract


def init_web3(ipc_path: str) -> Web3:
    return Web3(web3.HTTPProvider(ipc_path))


def init_contract(web3: Web3, abi: Dict[str, Any], address: Optional[str]) -> Contract:
    checksum_address: Optional[ChecksumAddress] = None
    if address is not None:
        checksum_address = web3.toChecksumAddress(address)
    return web3.eth.contract(address=checksum_address, abi=abi)


def load_abi():
    with open("{abi_json}", "r") as ifp:
        abi = json.load(ifp)
    return abi

def make_function_call(contract: Contract, function_name: str, *args):
    return contract.functions[function_name](*args).call()


def python_type(evm_type: str) -> Callable:
    if evm_type.startswith(("uint", "int")):
        return int
    elif evm_type.startswith("bytes"):
        return bytes
    elif evm_type == "string":
        return str
    elif evm_type == "address":
        return str
    elif evm_type == "bool":
        return bool
    else:
        raise ValueError(f"Cannot convert to python type", evm_type)


{cli_content}


def main() -> None:
    parser = generate_argument_parser()
    args = parser.parse_args()
    handle_args(args)


if __name__ == "__main__":
    main()